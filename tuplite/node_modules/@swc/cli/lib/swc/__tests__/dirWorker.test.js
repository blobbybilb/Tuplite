"use strict";
var _dirWorker = _interopRequireDefault(require("../dirWorker"));
var _options = require("../options");
var utilModule = _interopRequireWildcard(require("../util"));
var _path = _interopRequireDefault(require("path"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const createHandleCompileOptions = (options)=>({
        cliOptions: {
            outDir: "",
            outFile: "",
            filename: "",
            stripLeadingPaths: false,
            filenames: [],
            sync: false,
            workers: undefined,
            sourceMapTarget: undefined,
            extensions: [],
            watch: false,
            copyFiles: false,
            outFileExtension: "",
            includeDotfiles: false,
            deleteDirOnStart: false,
            quiet: true,
            only: [],
            ignore: []
        },
        swcOptions: {},
        sync: false,
        outDir: "outDir",
        filename: "",
        ...options
    })
;
jest.mock("../util", ()=>({
        ...jest.requireActual("../util"),
        compile: jest.fn()
    })
);
describe("dirWorker", ()=>{
    it('should call "compile" with the "DEFAULT_OUT_FILE_EXTENSION" when "outFileExtension" is undefined', async ()=>{
        const filename = "test";
        const options = createHandleCompileOptions({
            filename: `${filename}.ts`
        });
        try {
            await (0, _dirWorker).default(options);
        } catch (err) {
        // We don't care about the error in this test, we want to make sure that "compile" was called
        }
        // Assert that subFunction was called with the correct parameter
        expect(utilModule.compile).toHaveBeenCalledWith(options.filename, {
            sourceFileName: `../${options.filename}`
        }, options.sync, _path.default.join(options.outDir, `${filename}.${_options.DEFAULT_OUT_FILE_EXTENSION}`));
    });
});
describe("dirWorker", ()=>{
    it('should call "compile" with "outFileExtension" when undefined', async ()=>{
        const filename = "test";
        const options = createHandleCompileOptions({
            filename: `${filename}.ts`,
            outFileExtension: "cjs"
        });
        try {
            await (0, _dirWorker).default(options);
        } catch (err) {
        // We don't care about the error in this test, we want to make sure that "compile" was called
        }
        // Assert that subFunction was called with the correct parameter
        expect(utilModule.compile).toHaveBeenCalledWith(options.filename, {
            sourceFileName: `../${options.filename}`
        }, options.sync, _path.default.join(options.outDir, `${filename}.${options.outFileExtension}`));
    });
});
